type EmailData {
  id: ID!
  FirstName: String!
  LastName: String!
  Dob: String!
  PhoneNumber: String!
  Gender: String!
  EmployeeID: String!
  Resume: String!
  IDCard: String!
  Email: String!
  Status: String!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelEmailDataConnection {
  items: [EmailData]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelEmailDataFilterInput {
  id: ModelIDInput
  FirstName: ModelStringInput
  LastName: ModelStringInput
  Dob: ModelStringInput
  PhoneNumber: ModelStringInput
  Gender: ModelStringInput
  EmployeeID: ModelStringInput
  Resume: ModelStringInput
  IDCard: ModelStringInput
  Email: ModelStringInput
  Status: ModelStringInput
  and: [ModelEmailDataFilterInput]
  or: [ModelEmailDataFilterInput]
  not: ModelEmailDataFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  syncEmailData(filter: ModelEmailDataFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelEmailDataConnection
  getEmailData(id: ID!): EmailData
  listEmailDatas(filter: ModelEmailDataFilterInput, limit: Int, nextToken: String): ModelEmailDataConnection
}

input CreateEmailDataInput {
  id: ID
  FirstName: String!
  LastName: String!
  Dob: String!
  PhoneNumber: String!
  Gender: String!
  EmployeeID: String!
  Resume: String!
  IDCard: String!
  Email: String!
  Status: String!
  _version: Int
}

input UpdateEmailDataInput {
  id: ID!
  FirstName: String
  LastName: String
  Dob: String
  PhoneNumber: String
  Gender: String
  EmployeeID: String
  Resume: String
  IDCard: String
  Email: String
  Status: String
  _version: Int
}

input DeleteEmailDataInput {
  id: ID
  _version: Int
}

type Mutation {
  createEmailData(input: CreateEmailDataInput!, condition: ModelEmailDataConditionInput): EmailData
  updateEmailData(input: UpdateEmailDataInput!, condition: ModelEmailDataConditionInput): EmailData
  deleteEmailData(input: DeleteEmailDataInput!, condition: ModelEmailDataConditionInput): EmailData
}

input ModelEmailDataConditionInput {
  FirstName: ModelStringInput
  LastName: ModelStringInput
  Dob: ModelStringInput
  PhoneNumber: ModelStringInput
  Gender: ModelStringInput
  EmployeeID: ModelStringInput
  Resume: ModelStringInput
  IDCard: ModelStringInput
  Email: ModelStringInput
  Status: ModelStringInput
  and: [ModelEmailDataConditionInput]
  or: [ModelEmailDataConditionInput]
  not: ModelEmailDataConditionInput
}

type Subscription {
  onCreateEmailData: EmailData @aws_subscribe(mutations: ["createEmailData"])
  onUpdateEmailData: EmailData @aws_subscribe(mutations: ["updateEmailData"])
  onDeleteEmailData: EmailData @aws_subscribe(mutations: ["deleteEmailData"])
}
